int size = 0;//???
float newmask = 0;//???

float heightmask = 1
for(int i = 1; i < size + 1; i++)
{
    string volumename = "../../Viability_Attribute__";
    volumename = volumename + itoa(1);
    string volume = chs(volumename);
    float tempmask = volumesample(0, volume, temp);
    string ramp = "../../Attribute_Ramp__";
    ramp = ramp + itoa(i);
    if(volume == "Altitude")
    {
        //volumesample(filename, volumename, pos)
        float tempheight = volumesample(0, 'height', temp);
        float minHeight = 0;
        float maxHeight = 0;

        //getattribute(geometry, value, attribute_class, attribute_name, number, vertex_number)
        getattribute(@OpInput1, minHeight, "detail", "minHeight", 0, 0);
        getattribute(@OpInput1, maxHeight, "detail", "maxHeight", 0, 0);

        //fit(value, omin, omax, nmin, nmax)
        heightmask = fit(tempheight, minHeight, maxHeight, 0, 1);
        //chramp(channel, ramppos, time)
        newmask *= chramp(ramp, heightmask);
    }
    else
    {
        newmask *= chramp(ramp, tempmask);
    }
}







/////////////////////////////////////////////////////////////////
// viability selection

//closepoints
//closept

for(int i = 1; i < @closepoints; i++)
{
    int pt = closept[i];

    float removeed = point(0, 'removed', pt);
    if(removeed > 0)
        continue;

    //point(geometry, attribute_name, pointnumber)
    vector P1 = @P;
    vector P2 = point(0, "P", pt);
    float vbRadius1 = @ViabilityRadius;
    float vbRadius2 = point(0, 'ViabilityRadius', pt);
    float vb1 = @Viability;
    float vb2 = point(0, 'Viability', pt);

    float dis = distance2(P1, P2);
    if(dis < (vbRadius1 + vbRadius2))
    {
        setpointattrib(0, 'removed', pt, 1);
    }
    else
    {
        @removed = 1;
        return;
    }
}