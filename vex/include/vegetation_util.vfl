#include "gs_const_def.vfl"


struct foliage_type_info
{
    float viability = 0.0f;
    float viability_radius = 0.0f;
    float priority = 0.0f;
    float priority_radius = 0.0f;
    int can_under_shade = 0;
    float scale_min = 0.9f;
    float scale_max = 1.1f;

    void init_viability()
    {
        viability = ch("../../viability");
        viability_radius = ch("../../viability_radius");
    }

    void init_priority()
    {
        ;
    }

    void init_scale()
    {
        ;
    }
}

struct foliage_mask_info
{
    float layer_ao;
    float layer_height;
    float layer_flow;
    float layer_move;
    float layer_viability;
}


struct foliage_point_info
{
    int pt_num = 0;
    int foliage_idx = 0;
    int size_variant = 0;
    float removed = 0.0f;
    float age = 0.0f;
    float viability = 0.0f;
    float viability_radius = 1.0f;
    vector preview_color = {1,1,1};
    string unreal_path = "";

    // 0 is point cloud, 1 is heightfield
    void init_from_heightfield(int ptnum; vector position; int foliage_type_idx)
    {
        foliage_idx = foliage_type_idx;
        string foliage_idx_s = itoa(foliage_idx);

        vector flatpos = position;
        flatpos.y = 0; // heightfield need flatten pos to sample

        // viability from mask and foliage data
        viability = volumesample(1, "mask", flatpos);

        // age
        age = volumesample(1, "age", flatpos);

        // use age to get size
        float prefer_size = chramp("../FoliageTypes_AgeRamp"+foliage_idx_s, age);

        // from size to variant
        int variant_count = chi("../ArrNum_FoliageTypes_SizeVariants"+foliage_idx_s);
        int best_idx = 1;
        float best_size_diff = 9999;


        for(int i = 1; i <= variant_count; i++)
        {
            float size_radius = ch("../FoliageTypes_SizeVariants_SizeRadius" + foliage_idx_s + '_' + itoa(i));
            float size_diff = abs(size_radius - prefer_size);
            if(size_diff < best_size_diff)
            {
                best_idx = i;
            }
        }

        size_variant = best_idx;

        string surfix = foliage_idx_s+'_'+itoa(size_variant);

        // viability radius
        viability_radius = ch("../FoliageTypes_SizeVariants_SizeRadius"+surfix);

        // set unreal path base on the age and size variants
        unreal_path = chs("../FoliageTypes_SizeVariants_MeshAsset"+surfix);
        preview_color = chv("../FoliageTypes_PreviewColor"+foliage_idx_s);

        // TODO : pass attribute to unreal with uproperty mecham and instancing data(point color)
    }
}

struct heightfield_info
{
    float min_height = 0.0f;
    float max_height = 100.0f;

    void init()
    {
        min_height = detail(geoself(), "minHeight");
        max_height = detail(geoself(), "maxHeight");
    }
}




/*
mask can be:
user painted : plant, clearplant
auto generate : height, flow, ao, altitude, slope
*/
float gs_vegetation_heightfield_mask_merge(int foliage_idx; vector pos; heightfield_info hf_info)
{
    hf_info->init();

    float newmask = 1;
    string foliage_idx_s = itoa(foliage_idx);
    int layer_count = chi("../ArrNum_FoliageTypes_VaibilityLayers" + foliage_idx_s);

    //printf("layer_count%d", layer_count);
    //print_once(sprintf("layer_count%d", layer_count));

    // for each viability layer settings
    for(int i = 1; i <= layer_count; i++)
    {
        string volumename = "../FoliageTypes_VaibilityLayers_LayerName"+foliage_idx_s+'_'+itoa(i);
        string volume = chs(volumename);
        float tempmask = volumesample(0, volume, pos);
        string ramp = "../FoliageTypes_VaibilityLayers_WeightRamp"+foliage_idx_s+'_'+itoa(i);

        if(volume == "altitude") // altitude layer need to fit with height range
        {
            //volumesample(filename, volumename, pos)
            float tempheight = volumesample(0, 'height', pos);

            //fit(value, omin, omax, nmin, nmax)
            float heightmask = fit(tempheight, hf_info.min_height, hf_info.max_height, 0, 1);
            //chramp(channel, ramppos, time)
            newmask = chramp(ramp, heightmask);
        }
        else // other layers
        {
            newmask *= chramp(ramp, tempmask);
        }
    }

    return newmask;
}


//gs_vegetation_viability_selection(@ptnum, @P, GS_ATTR_VIABILITY_RADIUS, GS_ATTR_VIABILITY);
void gs_vegetation_viability_selection(int ptnum; vector position; float viability_radius; float viability)
{
    //nearpoint(geometry, pt, maxdist)
    int closepoints[] = nearpoints(0, position, 10);
    int closepoints_count = len(closepoints);

    //printf("count%d", closepoints_count);
    //print_once(sprintf("count%d", closepoints_count));

    // find close points and compare viability
    for(int i = 1; i <= closepoints_count; i++)
    {
        int pt = closepoints[i];

        float removed = point(0, GS_ATTRS_PT_REMOVED, pt);
        if(removed > 0)
            continue;

        //point(geometry, attribute_name, pointnumber)
        vector P1 = position;
        vector P2 = point(0, "P", pt);
        float vbRadius1 = viability_radius;
        float vbRadius2 = point(0, GS_ATTRS_VIABILITY_RADIUS, pt);
        float vb1 = viability;
        float vb2 = point(0, GS_ATTRS_VIABILITY, pt);

        float dis = distance2(P1, P2);
        if(dis < (vbRadius1 + vbRadius2))
        {
            setpointattrib(0, GS_ATTRS_PT_REMOVED, pt, 1); // remove other point
        }
        else
        {
            setpointattrib(0, GS_ATTRS_PT_REMOVED, ptnum, 1); // remove myself
        }
    }
}


void gs_foliage_remove_finalize(int ptnum; float removed)
{
    if (removed > 0.0f)
    {
        removepoint(0, ptnum);
    }
}

